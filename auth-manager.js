// Gerenciador de Autentica√ß√£o RIDEC
// Sistema de autentica√ß√£o integrado com Supabase

class AuthManager {
    constructor() {
        this.supabase = null;
        this.currentUser = null;
        this.isAuthenticated = false;
        this.userProfile = null;
        
        this.init();
    }

    // Inicializar sistema de autentica√ß√£o
    async init() {
        try {
            console.log('üîê Inicializando sistema de autentica√ß√£o...');
            
            if (typeof supabase === 'undefined') {
                throw new Error('Biblioteca do Supabase n√£o carregada');
            }

            if (typeof SUPABASE_CONFIG === 'undefined') {
                throw new Error('Configura√ß√£o do Supabase n√£o encontrada');
            }

            this.supabase = supabase.createClient(
                SUPABASE_CONFIG.url, 
                SUPABASE_CONFIG.anonKey
            );

            // Verificar sess√£o ativa
            await this.checkCurrentSession();
            
            // Escutar mudan√ßas de autentica√ß√£o
            this.supabase.auth.onAuthStateChange((event, session) => {
                console.log('üîÑ Estado de autentica√ß√£o alterado:', event, session?.user?.email);
                this.handleAuthStateChange(event, session);
            });

            console.log('‚úÖ Sistema de autentica√ß√£o inicializado');
        } catch (error) {
            console.error('‚ùå Erro ao inicializar autentica√ß√£o:', error);
        }
    }

    // Verificar sess√£o atual
    async checkCurrentSession() {
        try {
            const { data: { session }, error } = await this.supabase.auth.getSession();
            
            if (error) {
                console.error('‚ùå Erro ao verificar sess√£o:', error);
                return;
            }

            if (session) {
                this.currentUser = session.user;
                this.isAuthenticated = true;
                await this.loadUserProfile();
                console.log('‚úÖ Usu√°rio autenticado:', session.user.email);
            } else {
                this.currentUser = null;
                this.isAuthenticated = false;
                this.userProfile = null;
                console.log('‚ÑπÔ∏è Nenhuma sess√£o ativa');
            }
        } catch (error) {
            console.error('‚ùå Erro ao verificar sess√£o atual:', error);
        }
    }

    // Gerenciar mudan√ßas de estado de autentica√ß√£o
    async handleAuthStateChange(event, session) {
        switch (event) {
            case 'SIGNED_IN':
                this.currentUser = session.user;
                this.isAuthenticated = true;
                await this.loadUserProfile();
                this.onUserSignedIn(session.user);
                break;
                
            case 'SIGNED_OUT':
                this.currentUser = null;
                this.isAuthenticated = false;
                this.userProfile = null;
                this.onUserSignedOut();
                break;
                
            case 'TOKEN_REFRESHED':
                this.currentUser = session.user;
                this.onTokenRefreshed(session.user);
                break;
                
            case 'PASSWORD_RECOVERY':
                this.onPasswordRecovery();
                break;
        }
    }

    // Carregar perfil do usu√°rio
    async loadUserProfile() {
        if (!this.currentUser) return;

        try {
            // Buscar dados do usu√°rio na tabela usuario
            const { data, error } = await this.supabase
                .from('usuario')
                .select(`
                    *,
                    empresa:cod_empresa(nome_empresa),
                    tipo_usuario:cod_tipo_usuario(nome_tipo_usuario, nivel_acesso)
                `)
                .eq('email', this.currentUser.email)
                .single();

            if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
                console.error('‚ùå Erro ao carregar perfil:', error);
                return;
            }

            if (data) {
                this.userProfile = data;
                console.log('‚úÖ Perfil do usu√°rio carregado:', data.nome_usuario);
            } else {
                // Usu√°rio n√£o encontrado na tabela usuario, criar perfil b√°sico
                console.log('‚ÑπÔ∏è Usu√°rio n√£o encontrado na tabela usuario, criando perfil b√°sico...');
                await this.createBasicUserProfile();
            }
        } catch (error) {
            console.error('‚ùå Erro ao carregar perfil do usu√°rio:', error);
        }
    }

    // Criar perfil b√°sico do usu√°rio
    async createBasicUserProfile() {
        if (!this.currentUser) return;

        try {
            // Buscar empresa padr√£o ou criar uma
            let empresaId = 1; // ID padr√£o
            const { data: empresas } = await this.supabase
                .from('empresa')
                .select('cod_empresa')
                .limit(1);

            if (empresas && empresas.length > 0) {
                empresaId = empresas[0].cod_empresa;
            }

            // Buscar tipo de usu√°rio padr√£o
            let tipoUsuarioId = 1; // ID padr√£o
            const { data: tiposUsuario } = await this.supabase
                .from('tipo_usuario')
                .select('cod_tipo_usuario')
                .eq('nivel_acesso', 1) // N√≠vel b√°sico
                .limit(1);

            if (tiposUsuario && tiposUsuario.length > 0) {
                tipoUsuarioId = tiposUsuario[0].cod_tipo_usuario;
            }

            // Criar usu√°rio na tabela usuario
            const userData = {
                nome_usuario: this.currentUser.user_metadata?.full_name || this.currentUser.email.split('@')[0],
                email: this.currentUser.email,
                cod_empresa: empresaId,
                cod_tipo_usuario: tipoUsuarioId,
                ativo: true,
                created_at: new Date().toISOString()
            };

            const { data, error } = await this.supabase
                .from('usuario')
                .insert([userData])
                .select(`
                    *,
                    empresa:cod_empresa(nome_empresa),
                    tipo_usuario:cod_tipo_usuario(nome_tipo_usuario, nivel_acesso)
                `)
                .single();

            if (error) {
                console.error('‚ùå Erro ao criar perfil do usu√°rio:', error);
                return;
            }

            this.userProfile = data;
            console.log('‚úÖ Perfil b√°sico criado:', data.nome_usuario);
        } catch (error) {
            console.error('‚ùå Erro ao criar perfil b√°sico:', error);
        }
    }

    // Fazer login
    async signIn(email, password, rememberMe = false) {
        try {
            console.log('üîê Fazendo login...', { email });
            
            const { data, error } = await this.supabase.auth.signInWithPassword({
                email: email,
                password: password
            });

            if (error) {
                console.error('‚ùå Erro no login:', error);
                throw error;
            }

            if (data.user) {
                console.log('‚úÖ Login realizado com sucesso:', data.user.email);
                return data.user;
            }
        } catch (error) {
            console.error('‚ùå Erro no login:', error);
            throw error;
        }
    }

    // Fazer logout
    async signOut() {
        try {
            console.log('üö™ Fazendo logout...');
            
            const { error } = await this.supabase.auth.signOut();
            
            if (error) {
                console.error('‚ùå Erro no logout:', error);
                throw error;
            }

            console.log('‚úÖ Logout realizado com sucesso');
        } catch (error) {
            console.error('‚ùå Erro no logout:', error);
            throw error;
        }
    }

    // Registrar novo usu√°rio
    async signUp(email, password, userData = {}) {
        try {
            console.log('üìù Registrando novo usu√°rio...', { email });
            
            const { data, error } = await this.supabase.auth.signUp({
                email: email,
                password: password,
                options: {
                    data: userData
                }
            });

            if (error) {
                console.error('‚ùå Erro no registro:', error);
                throw error;
            }

            if (data.user) {
                console.log('‚úÖ Usu√°rio registrado com sucesso:', data.user.email);
                return data.user;
            }
        } catch (error) {
            console.error('‚ùå Erro no registro:', error);
            throw error;
        }
    }

    // Recuperar senha
    async resetPassword(email) {
        try {
            console.log('üîë Enviando email de recupera√ß√£o...', { email });
            
            const { error } = await this.supabase.auth.resetPasswordForEmail(email, {
                redirectTo: `${window.location.origin}/reset-password.html`
            });

            if (error) {
                console.error('‚ùå Erro ao enviar email:', error);
                throw error;
            }

            console.log('‚úÖ Email de recupera√ß√£o enviado');
        } catch (error) {
            console.error('‚ùå Erro na recupera√ß√£o:', error);
            throw error;
        }
    }

    // Login social
    async signInWithProvider(provider) {
        try {
            console.log(`üîê Fazendo login com ${provider}...`);
            
            const { data, error } = await this.supabase.auth.signInWithOAuth({
                provider: provider,
                options: {
                    redirectTo: `${window.location.origin}/index.html`
                }
            });

            if (error) {
                console.error(`‚ùå Erro no login com ${provider}:`, error);
                throw error;
            }

            console.log(`‚úÖ Redirecionando para ${provider}...`);
        } catch (error) {
            console.error(`‚ùå Erro no login social:`, error);
            throw error;
        }
    }

    // Verificar se usu√°rio tem permiss√£o
    hasPermission(permission) {
        if (!this.isAuthenticated || !this.userProfile) {
            return false;
        }

        const userLevel = this.userProfile.tipo_usuario?.nivel_acesso || 0;
        
        // Definir n√≠veis de permiss√£o
        const permissions = {
            'read': 1,
            'write': 2,
            'admin': 3,
            'super_admin': 4
        };

        const requiredLevel = permissions[permission] || 0;
        return userLevel >= requiredLevel;
    }

    // Verificar se usu√°rio √© admin
    isAdmin() {
        return this.hasPermission('admin');
    }

    // Verificar se usu√°rio √© super admin
    isSuperAdmin() {
        return this.hasPermission('super_admin');
    }

    // Obter informa√ß√µes do usu√°rio
    getUserInfo() {
        return {
            user: this.currentUser,
            profile: this.userProfile,
            isAuthenticated: this.isAuthenticated,
            isAdmin: this.isAdmin(),
            isSuperAdmin: this.isSuperAdmin()
        };
    }

    // Callbacks para eventos de autentica√ß√£o
    onUserSignedIn(user) {
        console.log('üë§ Usu√°rio fez login:', user.email);
        // Implementar l√≥gica espec√≠fica quando usu√°rio faz login
        this.updateUIForAuthenticatedUser();
    }

    onUserSignedOut() {
        console.log('üëã Usu√°rio fez logout');
        // Implementar l√≥gica espec√≠fica quando usu√°rio faz logout
        this.updateUIForUnauthenticatedUser();
    }

    onTokenRefreshed(user) {
        console.log('üîÑ Token renovado para:', user.email);
    }

    onPasswordRecovery() {
        console.log('üîë Recupera√ß√£o de senha iniciada');
    }

    // Atualizar UI para usu√°rio autenticado
    updateUIForAuthenticatedUser() {
        // Mostrar elementos para usu√°rio logado
        const authElements = document.querySelectorAll('.auth-required');
        authElements.forEach(element => {
            element.style.display = 'block';
        });

        // Esconder elementos para usu√°rio n√£o logado
        const unauthElements = document.querySelectorAll('.auth-not-required');
        unauthElements.forEach(element => {
            element.style.display = 'none';
        });

        // Atualizar informa√ß√µes do usu√°rio na UI
        this.updateUserInfoInUI();
    }

    // Atualizar UI para usu√°rio n√£o autenticado
    updateUIForUnauthenticatedUser() {
        // Esconder elementos para usu√°rio logado
        const authElements = document.querySelectorAll('.auth-required');
        authElements.forEach(element => {
            element.style.display = 'none';
        });

        // Mostrar elementos para usu√°rio n√£o logado
        const unauthElements = document.querySelectorAll('.auth-not-required');
        unauthElements.forEach(element => {
            element.style.display = 'block';
        });
    }

    // Atualizar informa√ß√µes do usu√°rio na UI
    updateUserInfoInUI() {
        if (!this.userProfile) return;

        // Atualizar nome do usu√°rio
        const userNameElements = document.querySelectorAll('.user-name');
        userNameElements.forEach(element => {
            element.textContent = this.userProfile.nome_usuario;
        });

        // Atualizar email do usu√°rio
        const userEmailElements = document.querySelectorAll('.user-email');
        userEmailElements.forEach(element => {
            element.textContent = this.userProfile.email;
        });

        // Atualizar empresa do usu√°rio
        const userCompanyElements = document.querySelectorAll('.user-company');
        userCompanyElements.forEach(element => {
            element.textContent = this.userProfile.empresa?.nome_empresa || 'N/A';
        });

        // Atualizar tipo de usu√°rio
        const userTypeElements = document.querySelectorAll('.user-type');
        userTypeElements.forEach(element => {
            element.textContent = this.userProfile.tipo_usuario?.nome_tipo_usuario || 'Usu√°rio';
        });
    }

    // Verificar se deve redirecionar para login
    requireAuth() {
        if (!this.isAuthenticated) {
            console.log('üîí Acesso negado - redirecionando para login');
            window.location.href = 'login.html';
            return false;
        }
        return true;
    }

    // Verificar permiss√£o espec√≠fica
    requirePermission(permission) {
        if (!this.requireAuth()) {
            return false;
        }

        if (!this.hasPermission(permission)) {
            console.log(`üö´ Permiss√£o negada: ${permission}`);
            this.showPermissionDenied();
            return false;
        }

        return true;
    }

    // Mostrar mensagem de permiss√£o negada
    showPermissionDenied() {
        // Implementar UI para mostrar erro de permiss√£o
        alert('Voc√™ n√£o tem permiss√£o para acessar esta funcionalidade.');
    }

    // Obter cliente Supabase
    getSupabaseClient() {
        return this.supabase;
    }

    // Verificar se est√° inicializado
    isInitialized() {
        return this.supabase !== null;
    }
}

// Criar inst√¢ncia global
const authManager = new AuthManager();

// Exportar para uso global
if (typeof window !== 'undefined') {
    window.authManager = authManager;
    window.AuthManager = AuthManager;
}

// Inicializar quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    // Verificar se estamos na p√°gina de login
    if (window.location.pathname.includes('login.html')) {
        return; // N√£o fazer verifica√ß√£o de autentica√ß√£o na p√°gina de login
    }

    // Verificar autentica√ß√£o em outras p√°ginas
    setTimeout(() => {
        if (!authManager.isAuthenticated) {
            console.log('üîí Usu√°rio n√£o autenticado - redirecionando para login');
            window.location.href = 'login.html';
        }
    }, 1000);
});

